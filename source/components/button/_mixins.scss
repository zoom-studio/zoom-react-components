@mixin var($variant) {
  &-#{$variant} {
    @content;
  }
}

@mixin hover-and-active {
  &:hover:not(#{disabled-selector()}),
  &.active,
  &.active#{disabled-selector()} {
    @content;
  }
}

@mixin active {
  &:active:not(#{disabled-selector()}) {
    @content;
  }
}

@mixin disabled {
  #{disabled-selector(true)} {
    @content;
  }
}

@mixin generate-primary-variants {
  @each $variant in $common-variants {
    $color-name: translate-variant($variant);
    $text-color: if($variant == 'warning', 'black', 'white');

    @include var($variant) {
      background-color: color(#{$color-name});
      border-color: color(#{$color-name});
      color: #{$text-color};

      @include hover-and-active {
        background-color: variant-background($variant);
      }

      @include active {
        box-shadow: variant-shadow($variant);
      }

      @include disabled {
        background-color: color(layer, 3);
        color: color(text, 3);
        border-color: transparent;
      }
    }
  }
}

@mixin generate-secondary-variants {
  @each $variant in $common-variants {
    $color-name: translate-variant($variant);

    @include var($variant) {
      background-color: color(layer, 2);
      border-color: color(border, 1);
      color: color(text, 1);

      @include hover-and-active {
        border-color: variant-border($variant);
        color: variant-color($variant);
      }

      @include active {
        box-shadow: variant-shadow($variant);
      }

      @include disabled {
        background-color: color(layer, 2);
        color: color(text, 3);
        border-color: color(border, 3);
      }
    }
  }
}

@mixin generate-dashed-variants {
  @each $variant in $common-variants {
    $color-name: translate-variant($variant);

    @include var($variant) {
      background-color: color(layer, 2);
      border-color: color(border, 1);
      color: color(text, 1);
      border-style: dashed !important;

      @include hover-and-active {
        border-color: variant-border($variant);
        color: variant-color($variant);
      }

      @include active {
        box-shadow: variant-shadow($variant);
      }

      @include disabled {
        background-color: color(layer, 2);
        color: color(text, 3);
        border-color: color(border, 3);
      }
    }
  }
}

@mixin generate-link-variants {
  @each $variant in $common-variants {
    $color-name: translate-variant($variant);

    @include var($variant) {
      background-color: transparent;
      border-color: transparent;
      color: variant-color($variant);

      @include hover-and-active {
        color: if($variant == 'neutral', color(accent, 2, lighter, 2), color($variant, lighter, 2));
      }

      @include active {
        box-shadow: variant-shadow($variant);
      }

      @include disabled {
        color: color(text, 3);
      }
    }
  }
}

@mixin generate-text-variants {
  @each $variant in $common-variants {
    $color-name: translate-variant($variant);

    @include var($variant) {
      background-color: transparent;
      border-color: transparent;
      color: color(text, 1);

      @include hover-and-active {
        color: color(text, 2);
      }

      @include active {
        box-shadow: variant-shadow($variant);
      }

      @include disabled {
        color: color(text, 3);
      }
    }
  }
}

@mixin generate-bordered-variants {
  @each $variant in $common-variants {
    $color-name: translate-variant($variant);
    $text-color: if($variant == 'warning', 'black', 'white');

    @include var($variant) {
      background-color: transparent;
      border-color: variant-border($variant);
      color: variant-color($variant);

      @include hover-and-active {
        background-color: color(#{$color-name});
        color: #{$text-color};
      }

      @include active {
        background-color: color(#{$color-name});
        color: #{$text-color};
      }

      @include disabled {
        background-color: transparent;
        color: color(text, 3);
        border-color: color(border, 2);
      }
    }
  }
}

@mixin generate-size($size) {
  $padding: 4px 10px;
  $spin-width: 17px;
  $emoji-width: 18px;
  $max-size: 29px;

  @include text(common, $size);

  @if $size == 'normal' {
    $padding: 6px 20px;
    $spin-width: 20px;
    $emoji-width: 20px;
    $max-size: 36px;
  } @else if $size == 'large' {
    $padding: 10px 24px;
    $spin-width: 23px;
    $emoji-width: 24px;
    $max-size: 47px;
  }

  &.zoomrc-button-square,
  &.zoomrc-button-sharp-square,
  &.zoomrc-button-circle {
    max-width: $max-size;
    max-height: $max-size;
    overflow: hidden;

    > .zoomrc-button-inner-child {
      padding: 2px;
      justify-content: center;
    }
  }

  &-inner-child {
    text-decoration: none;
    color: inherit;
    text-align: center;
    width: 100%;
    display: flex;
    justify-content: center;
    column-gap: 6px;
    align-items: center;
    padding: #{$padding};

    > .zoomrc-spin-#{$size} > .spinner {
      width: #{$spin-width};
      height: #{$spin-width};
    }

    .zoomrc-emoji {
      width: #{$emoji-width};
    }
  }
}
