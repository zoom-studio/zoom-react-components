import React, { FC, SVGAttributes } from 'react'
import { useZoomComponent } from '../../hooks'

import { Color } from '../../types/color'
import { colorFnToColor, color as generateColor } from '../../utils'

export namespace SVGIconNS {
  export const SVGIconNames = ['empty-box'] as const
  export type SVGIconNames = typeof SVGIconNames[number]

  export interface Props extends Omit<SVGAttributes<SVGSVGElement>, 'color' | 'size' | 'name'> {
    name: SVGIconNames
    size?: number | string
    color?: Color
  }
}

export const SVGIcon: FC<SVGIconNS.Props> = ({
  color = generateColor({ source: 'text', tone: 2 }),
  size = 100,
  className,
  name,
}) => {
  const { createClassName } = useZoomComponent('svg-icon')
  color = colorFnToColor(color)

  const classes = createClassName(className)

  const baseProps: SVGAttributes<SVGSVGElement> = {
    width: size,
    height: size,
    className: classes,
  }

  switch (name) {
    case 'empty-box': {
      return (
        <svg {...baseProps} viewBox="0 0 173 138" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path
            d="M150.251 11.5286C149.281 10.1451 147.638 9.52184 146.031 9.76068C145.969 9.74611 145.908 9.7199 145.847 9.71116L80.0073 0.0470848C79.2878 -0.0606822 78.5539 0.0179592 77.8694 0.268445L25.1364 19.5966C25.1131 19.6053 25.0927 19.6199 25.0694 19.6286C25.0141 19.6519 24.9616 19.6869 24.9034 19.7073C24.615 19.8354 24.3471 19.9869 24.0995 20.1646C24.0238 20.2199 23.951 20.2752 23.8752 20.3364C23.6044 20.5578 23.3568 20.7995 23.15 21.0762C23.1383 21.0937 23.1209 21.1024 23.1092 21.1199L0.84222 51.5801C-0.0111779 52.7481 -0.232537 54.2684 0.253871 55.6316C0.740278 56.9976 1.87329 58.0286 3.27717 58.3898L22.5995 63.3791V111.149C22.5995 113.068 23.8548 114.766 25.6927 115.329L96.4403 136.946C96.4636 136.958 96.4898 136.949 96.5131 136.961C96.8917 137.066 97.2878 137.133 97.684 137.135C97.6927 137.135 97.7044 137.141 97.716 137.141H97.7189C98.1354 137.141 98.5432 137.066 98.951 136.946C99.0791 136.905 99.1985 136.85 99.3296 136.795C99.5014 136.731 99.6704 136.684 99.8393 136.597L150.606 108.423C151.996 107.651 152.855 106.189 152.855 104.601V56.8403L170.028 48.5976C171.184 48.0442 172.037 47.0044 172.364 45.7636C172.687 44.5199 172.451 43.2005 171.714 42.149L150.251 11.5286ZM79.8354 8.85485L131.226 16.3985L97.1364 32.249L43.1539 22.3024L79.8354 8.85485ZM28.5471 28.4947L90.4024 39.8947L72.2218 67.1684L11.6976 51.5422L28.5471 28.4947ZM31.3374 107.916V65.6335L73.0403 76.4014C73.4044 76.4917 73.7684 76.5413 74.1325 76.5413C75.5684 76.5413 76.9432 75.8306 77.7675 74.5956L93.3471 51.2277V126.863L31.3374 107.916ZM144.114 102.027L102.082 125.348V56.3393L109.757 72.6471C110.255 73.6985 111.152 74.5141 112.244 74.8985C112.719 75.0733 113.214 75.1519 113.706 75.1519C114.356 75.1519 115 75.0063 115.597 74.7267L144.108 61.0432L144.114 102.027ZM115.792 64.9432L103.538 38.9102L145.195 19.5413L161.604 42.95L115.792 64.9432Z"
            fill={color}
            stroke={color}
            strokeWidth="0.00172506"
          />
        </svg>
      )
    }
  }
}
