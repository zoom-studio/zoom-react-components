"use strict";(self.webpackChunk_zoom_studio_zoom_react_components=self.webpackChunk_zoom_studio_zoom_react_components||[]).push([[8948],{"./source/stories/table.story.tsx":function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{ActionBar:function(){return ActionBar},Basic:function(){return Basic},ColumnSummary:function(){return ColumnSummary},ConditionallyExpandable:function(){return ConditionallyExpandable},ConditionallySelectable:function(){return ConditionallySelectable},CustomCells:function(){return CustomCells},EmptyState:function(){return EmptyState},Expandable:function(){return Expandable},FullHeight:function(){return FullHeight},GroupedColumns:function(){return GroupedColumns},Hoverable:function(){return Hoverable},InfiniteScroll:function(){return InfiniteScroll},LoadingWithData:function(){return LoadingWithData},LoadingWithoutData:function(){return LoadingWithoutData},Playground:function(){return Playground},Resizable:function(){return Resizable},ResizeOnRelease:function(){return ResizeOnRelease},Selectable:function(){return Selectable},Sortable:function(){return Sortable},StickyActions:function(){return StickyActions},StickyHeaderAndFooter:function(){return StickyHeaderAndFooter},Striped:function(){return Striped},Virtualized:function(){return Virtualized},VirtualizedInfiniteScroll:function(){return VirtualizedInfiniteScroll},WithActions:function(){return WithActions},WithHeader:function(){return WithHeader},WithHeaderAndFooter:function(){return WithHeaderAndFooter},__namedExportsOrder:function(){return __namedExportsOrder},default:function(){return table_story}});var react=__webpack_require__("./node_modules/react/index.js"),components=__webpack_require__("./source/components/index.ts"),fixtures=__webpack_require__("./source/fixtures/index.ts"),zoom_js_ts_utils=__webpack_require__("./node_modules/@zoom-studio/zoom-js-ts-utils/index.js");let UseCustomFetchNS;UseCustomFetchNS||(UseCustomFetchNS={});const useCustomFetch=({itemsPerQuery:itemsPerQuery=20,sleepTime:sleepTime=700,makeData:makeData,maxItems:maxItems})=>{const[isLoading,setIsLoading]=(0,react.useState)(!1),[data,setData]=(0,react.useState)([]),[hasMore,setHasMore]=(0,react.useState)(!0),sendQuery=(0,react.useCallback)((async()=>{setIsLoading(!0),await(0,zoom_js_ts_utils._v)(sleepTime),setData((currentData=>{const newData=[...currentData];if(!maxItems||currentData.length<maxItems){const newDataLength=maxItems?maxItems-newData.length>=itemsPerQuery?itemsPerQuery:maxItems-newData.length:itemsPerQuery;newData.push(...((startingIndex,length)=>{const data=[];for(let i=startingIndex;i<length+startingIndex;i++)data.push(...makeData(1));return data})(newData.length,newDataLength))}return setHasMore(!maxItems||newData.length<maxItems),newData})),setIsLoading(!1)}),[]);return{sendQuery:sendQuery,data:data,isLoading:isLoading,hasMore:hasMore}};var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");const useTableStory=(maxData=400,itemsPerQuery=20)=>{const staticData=(0,fixtures.tw)(maxData),{data:data,isLoading:isLoading,sendQuery:sendQuery}=useCustomFetch({makeData:fixtures.tw,maxItems:maxData,itemsPerQuery:itemsPerQuery});return{data:data,isLoading:isLoading,sendQuery:sendQuery,staticData:staticData}},Basic=()=>{const{staticData:staticData}=useTableStory(10);return(0,jsx_runtime.jsx)(components.iA_,{dataset:staticData,id:"basic-table",endMessage:"",resizableColumns:!1,renderActionsBar:!1,renderHeader:!1,children:({Column:Column})=>(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(Column,{accessor:"name.first"}),(0,jsx_runtime.jsx)(Column,{accessor:"name.last"}),(0,jsx_runtime.jsx)(Column,{accessor:"age"}),(0,jsx_runtime.jsx)(Column,{accessor:"progress"})]})})};Basic.displayName="Basic";const WithHeader=()=>{const{staticData:staticData}=useTableStory(10);return(0,jsx_runtime.jsx)(components.iA_,{dataset:staticData,id:"basic-table",endMessage:"",resizableColumns:!1,renderActionsBar:!1,children:({Column:Column,Header:Header})=>(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(Column,{accessor:"name.first",children:(0,jsx_runtime.jsx)(Header,{children:"First name"})}),(0,jsx_runtime.jsx)(Column,{accessor:"name.last",children:(0,jsx_runtime.jsx)(Header,{children:"Last name"})}),(0,jsx_runtime.jsx)(Column,{accessor:"age",children:(0,jsx_runtime.jsx)(Header,{children:"Age"})}),(0,jsx_runtime.jsx)(Column,{accessor:"progress",children:(0,jsx_runtime.jsx)(Header,{children:"Progress"})})]})})};WithHeader.displayName="WithHeader";const WithHeaderAndFooter=()=>{const{staticData:staticData}=useTableStory(10);return(0,jsx_runtime.jsx)(components.iA_,{dataset:staticData,id:"basic-table",endMessage:"",renderFooter:!0,resizableColumns:!1,renderActionsBar:!1,children:({Column:Column,Header:Header,Footer:Footer})=>(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsxs)(Column,{accessor:"name.first",children:[(0,jsx_runtime.jsx)(Header,{children:"First name"}),(0,jsx_runtime.jsx)(Footer,{children:"First name"})]}),(0,jsx_runtime.jsxs)(Column,{accessor:"name.last",children:[(0,jsx_runtime.jsx)(Header,{children:"Last name"}),(0,jsx_runtime.jsx)(Footer,{children:"Last name"})]}),(0,jsx_runtime.jsxs)(Column,{accessor:"age",children:[(0,jsx_runtime.jsx)(Header,{children:"Age"}),(0,jsx_runtime.jsx)(Footer,{children:"Age"})]}),(0,jsx_runtime.jsxs)(Column,{accessor:"progress",children:[(0,jsx_runtime.jsx)(Header,{children:"Progress"}),(0,jsx_runtime.jsx)(Footer,{children:"Progress"})]})]})})};WithHeaderAndFooter.displayName="WithHeaderAndFooter";const StickyHeaderAndFooter=()=>{const{staticData:staticData}=useTableStory(100);return(0,jsx_runtime.jsx)(components.iA_,{dataset:staticData,id:"basic-table",endMessage:"",renderFooter:!0,resizableColumns:!1,renderActionsBar:!1,stickyHeader:!0,stickyFooter:!0,children:({Column:Column,Header:Header,Footer:Footer})=>(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsxs)(Column,{accessor:"name.first",children:[(0,jsx_runtime.jsx)(Header,{children:"First name"}),(0,jsx_runtime.jsx)(Footer,{children:"First name"})]}),(0,jsx_runtime.jsxs)(Column,{accessor:"name.last",children:[(0,jsx_runtime.jsx)(Header,{children:"Last name"}),(0,jsx_runtime.jsx)(Footer,{children:"Last name"})]}),(0,jsx_runtime.jsxs)(Column,{accessor:"age",children:[(0,jsx_runtime.jsx)(Header,{children:"Age"}),(0,jsx_runtime.jsx)(Footer,{children:"Age"})]}),(0,jsx_runtime.jsxs)(Column,{accessor:"progress",children:[(0,jsx_runtime.jsx)(Header,{children:"Progress"}),(0,jsx_runtime.jsx)(Footer,{children:"Progress"})]})]})})};StickyHeaderAndFooter.displayName="StickyHeaderAndFooter";const CustomCells=()=>{const{staticData:staticData}=useTableStory(10);return(0,jsx_runtime.jsx)(components.iA_,{dataset:staticData,id:"basic-table",endMessage:"",resizableColumns:!1,renderActionsBar:!1,children:({Column:Column,Header:Header,Cell:Cell})=>(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(Column,{accessor:"name.first",children:(0,jsx_runtime.jsx)(Header,{children:"First name"})}),(0,jsx_runtime.jsx)(Column,{accessor:"name.last",children:(0,jsx_runtime.jsx)(Header,{children:"Last name"})}),(0,jsx_runtime.jsx)(Column,{accessor:"age",children:(0,jsx_runtime.jsx)(Header,{children:"Age"})}),(0,jsx_runtime.jsxs)(Column,{accessor:"progress",children:[(0,jsx_runtime.jsx)(Header,{children:"Progress"}),(0,jsx_runtime.jsx)(Cell,{children:data=>(0,jsx_runtime.jsx)(components.Exd,{type:"circular",circularSize:30,circularStroke:6,info:"percentage",showInfo:!0,circularPercentageFontSize:10,steps:{percentage:data.progress}})})]})]})})};CustomCells.displayName="CustomCells";const Striped=()=>{const{staticData:staticData}=useTableStory(10);return(0,jsx_runtime.jsx)(components.iA_,{dataset:staticData,id:"basic-table",endMessage:"",striped:!0,resizableColumns:!1,renderActionsBar:!1,children:({Column:Column,Header:Header})=>(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(Column,{accessor:"name.first",children:(0,jsx_runtime.jsx)(Header,{children:"First name"})}),(0,jsx_runtime.jsx)(Column,{accessor:"name.last",children:(0,jsx_runtime.jsx)(Header,{children:"Last name"})}),(0,jsx_runtime.jsx)(Column,{accessor:"age",children:(0,jsx_runtime.jsx)(Header,{children:"Age"})}),(0,jsx_runtime.jsx)(Column,{accessor:"progress",children:(0,jsx_runtime.jsx)(Header,{children:"Progress"})})]})})};Striped.displayName="Striped";const Hoverable=()=>{const{staticData:staticData}=useTableStory(10);return(0,jsx_runtime.jsx)(components.iA_,{dataset:staticData,id:"basic-table",endMessage:"",hoverable:!0,resizableColumns:!1,renderActionsBar:!1,children:({Column:Column,Header:Header})=>(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(Column,{accessor:"name.first",children:(0,jsx_runtime.jsx)(Header,{children:"First name"})}),(0,jsx_runtime.jsx)(Column,{accessor:"name.last",children:(0,jsx_runtime.jsx)(Header,{children:"Last name"})}),(0,jsx_runtime.jsx)(Column,{accessor:"age",children:(0,jsx_runtime.jsx)(Header,{children:"Age"})}),(0,jsx_runtime.jsx)(Column,{accessor:"progress",children:(0,jsx_runtime.jsx)(Header,{children:"Progress"})})]})})};Hoverable.displayName="Hoverable";const WithActions=()=>{const{staticData:staticData}=useTableStory(10);return(0,jsx_runtime.jsx)(components.iA_,{dataset:staticData,id:"basic-table",endMessage:"",resizableColumns:!1,renderActionsBar:!1,actions:[{onClick:data=>{alert(JSON.stringify(data,null,2))},children:"Alert data",type:"bordered",style:{margin:6}}],children:({Column:Column,Header:Header})=>(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(Column,{accessor:"name.first",children:(0,jsx_runtime.jsx)(Header,{children:"First name"})}),(0,jsx_runtime.jsx)(Column,{accessor:"name.last",children:(0,jsx_runtime.jsx)(Header,{children:"Last name"})}),(0,jsx_runtime.jsx)(Column,{accessor:"age",children:(0,jsx_runtime.jsx)(Header,{children:"Age"})}),(0,jsx_runtime.jsx)(Column,{accessor:"progress",children:(0,jsx_runtime.jsx)(Header,{children:"Progress"})})]})})};WithActions.displayName="WithActions";const StickyActions=()=>{const{staticData:staticData}=useTableStory(10);return(0,jsx_runtime.jsx)(components.iA_,{dataset:staticData,id:"basic-table",endMessage:"",resizableColumns:!1,renderActionsBar:!1,stickyActions:!0,actions:[{onClick:data=>{alert(JSON.stringify(data,null,2))},children:"Alert data",type:"bordered",style:{margin:6}}],children:({Column:Column,Header:Header})=>(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(Column,{accessor:"name.first",children:(0,jsx_runtime.jsx)(Header,{children:"First name"})}),(0,jsx_runtime.jsx)(Column,{accessor:"name.last",children:(0,jsx_runtime.jsx)(Header,{children:"Last name"})}),(0,jsx_runtime.jsx)(Column,{accessor:"age",children:(0,jsx_runtime.jsx)(Header,{children:"Age"})}),(0,jsx_runtime.jsx)(Column,{accessor:"progress",children:(0,jsx_runtime.jsx)(Header,{children:"Progress"})}),(0,jsx_runtime.jsx)(Column,{accessor:"address",width:500})]})})};StickyActions.displayName="StickyActions";const ActionBar=()=>{const{staticData:staticData}=useTableStory(10);return(0,jsx_runtime.jsx)(components.iA_,{dataset:staticData,id:"basic-table",endMessage:"",resizableColumns:!1,renderHeader:!1,title:"Table with action bar",children:({Column:Column})=>(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(Column,{accessor:"name.first",togglerLabel:"First name"}),(0,jsx_runtime.jsx)(Column,{accessor:"name.last",togglerLabel:"Last name"}),(0,jsx_runtime.jsx)(Column,{accessor:"age",togglerLabel:"Age"}),(0,jsx_runtime.jsx)(Column,{accessor:"progress",togglerLabel:"Progress"})]})})};ActionBar.displayName="ActionBar";const FullHeight=()=>{const{staticData:staticData}=useTableStory(100);return(0,jsx_runtime.jsx)(components.iA_,{dataset:staticData,id:"basic-table",endMessage:"",resizableColumns:!1,title:"Table with action bar",maxHeight:"unset",fullHeight:!0,renderFooter:!0,stickyFooter:!0,stickyHeader:!0,children:({Column:Column,Footer:Footer})=>(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(Column,{accessor:"name.first",togglerLabel:"First name",children:(0,jsx_runtime.jsx)(Footer,{children:"First name"})}),(0,jsx_runtime.jsx)(Column,{accessor:"name.last",togglerLabel:"Last name",children:(0,jsx_runtime.jsx)(Footer,{children:"Last name"})}),(0,jsx_runtime.jsx)(Column,{accessor:"age",togglerLabel:"Age",children:(0,jsx_runtime.jsx)(Footer,{children:"Age"})}),(0,jsx_runtime.jsx)(Column,{accessor:"progress",togglerLabel:"Progress",children:(0,jsx_runtime.jsx)(Footer,{children:"Progress"})})]})})};FullHeight.displayName="FullHeight";const GroupedColumns=()=>{const{staticData:staticData}=useTableStory(60);return(0,jsx_runtime.jsx)(components.iA_,{dataset:staticData,id:"basic-table",endMessage:"",resizableColumns:!1,renderActionsBar:!1,children:({Column:Column,Cell:Cell,ColumnGroup:ColumnGroup,Footer:Footer,Header:Header})=>(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(Column,{accessor:"id",width:10,id:"id",resizable:!1,togglerLabel:"User IDs",hidden:!0,children:(0,jsx_runtime.jsx)(Cell,{children:(_data,index)=>(index+1).toString().padStart(3,"0")})}),(0,jsx_runtime.jsxs)(ColumnGroup,{children:[(0,jsx_runtime.jsx)(Header,{children:"Hello"}),(0,jsx_runtime.jsx)(Column,{accessor:"name.first",id:"name.first",togglerLabel:"First names",children:(0,jsx_runtime.jsx)(Footer,{children:"firstName"})}),(0,jsx_runtime.jsxs)(Column,{accessor:"name.last",id:"name.last",togglerLabel:"Last names",children:[(0,jsx_runtime.jsx)(Header,{children:"Last name"}),(0,jsx_runtime.jsx)(Footer,{children:"lastName"})]})]}),(0,jsx_runtime.jsxs)(ColumnGroup,{children:[(0,jsx_runtime.jsx)(Header,{children:"Info"}),(0,jsx_runtime.jsx)(Footer,{children:"info"}),(0,jsx_runtime.jsxs)(Column,{accessor:"age",id:"age",togglerLabel:"Ages",children:[(0,jsx_runtime.jsx)(Header,{children:"Age"}),(0,jsx_runtime.jsx)(Footer,{children:"age"})]}),(0,jsx_runtime.jsxs)(ColumnGroup,{children:[(0,jsx_runtime.jsx)(Header,{children:"More info"}),(0,jsx_runtime.jsxs)(Column,{accessor:"visits",id:"visits",togglerLabel:"Visits",children:[(0,jsx_runtime.jsx)(Header,{children:"Visits"}),(0,jsx_runtime.jsx)(Footer,{children:"visits"})]}),(0,jsx_runtime.jsxs)(Column,{accessor:"status",id:"status",togglerLabel:"Statuses",children:[(0,jsx_runtime.jsx)(Header,{children:"Status"}),(0,jsx_runtime.jsx)(Footer,{children:"status"})]}),(0,jsx_runtime.jsxs)(Column,{accessor:"progress",id:"progress",width:50,sortable:!1,togglerLabel:"Progresses",children:[(0,jsx_runtime.jsx)(Header,{children:"Progress"}),(0,jsx_runtime.jsx)(Footer,{children:"progress"})]})]})]})]})})};GroupedColumns.displayName="GroupedColumns";const ColumnSummary=()=>{const{staticData:staticData}=useTableStory(60);return(0,jsx_runtime.jsx)(components.iA_,{dataset:staticData,id:"basic-table",endMessage:"",resizableColumns:!1,renderActionsBar:!1,children:({Column:Column,Cell:Cell,ColumnGroup:ColumnGroup,Footer:Footer,Header:Header})=>(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(Column,{accessor:"id",width:10,id:"id",resizable:!1,togglerLabel:"User IDs",hidden:!0,children:(0,jsx_runtime.jsx)(Cell,{children:(_data,index)=>(index+1).toString().padStart(3,"0")})}),(0,jsx_runtime.jsxs)(ColumnGroup,{children:[(0,jsx_runtime.jsx)(Header,{children:"Hello"}),(0,jsx_runtime.jsx)(Column,{accessor:"name.first",id:"name.first",togglerLabel:"First names",children:(0,jsx_runtime.jsx)(Footer,{children:"firstName"})}),(0,jsx_runtime.jsxs)(Column,{accessor:"name.last",id:"name.last",togglerLabel:"Last names",children:[(0,jsx_runtime.jsx)(Header,{children:"Last name"}),(0,jsx_runtime.jsx)(Footer,{children:"lastName"})]})]}),(0,jsx_runtime.jsxs)(ColumnGroup,{children:[(0,jsx_runtime.jsx)(Header,{children:"Info"}),(0,jsx_runtime.jsx)(Footer,{children:"info"}),(0,jsx_runtime.jsxs)(Column,{accessor:"age",id:"age",togglerLabel:"Ages",children:[(0,jsx_runtime.jsx)(Header,{children:"Age"}),(0,jsx_runtime.jsx)(Footer,{children:"age"})]}),(0,jsx_runtime.jsxs)(ColumnGroup,{children:[(0,jsx_runtime.jsx)(Header,{children:"More info"}),(0,jsx_runtime.jsxs)(Column,{accessor:"visits",id:"visits",togglerLabel:"Visits",children:[(0,jsx_runtime.jsx)(Header,{children:"Visits"}),(0,jsx_runtime.jsx)(Footer,{children:"visits"})]}),(0,jsx_runtime.jsxs)(Column,{accessor:"status",id:"status",togglerLabel:"Statuses",summary:1e3,children:[(0,jsx_runtime.jsx)(Header,{children:"Status"}),(0,jsx_runtime.jsx)(Footer,{children:"status"})]}),(0,jsx_runtime.jsxs)(Column,{accessor:"progress",id:"progress",width:50,sortable:!1,togglerLabel:"Progresses",summary:1e3,children:[(0,jsx_runtime.jsx)(Header,{children:"Progress"}),(0,jsx_runtime.jsx)(Footer,{children:"progress"})]})]})]})]})})};ColumnSummary.displayName="ColumnSummary";const Resizable=()=>{const{staticData:staticData}=useTableStory(60);return(0,jsx_runtime.jsx)(components.iA_,{dataset:staticData,id:"basic-table",endMessage:"",children:({Column:Column,Cell:Cell,ColumnGroup:ColumnGroup,Footer:Footer,Header:Header})=>(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(Column,{accessor:"id",width:10,id:"id",resizable:!1,togglerLabel:"User IDs",hidden:!0,children:(0,jsx_runtime.jsx)(Cell,{children:(_data,index)=>(index+1).toString().padStart(3,"0")})}),(0,jsx_runtime.jsxs)(ColumnGroup,{children:[(0,jsx_runtime.jsx)(Header,{children:"Hello"}),(0,jsx_runtime.jsx)(Column,{accessor:"name.first",id:"name.first",togglerLabel:"First names",children:(0,jsx_runtime.jsx)(Footer,{children:"firstName"})}),(0,jsx_runtime.jsxs)(Column,{accessor:"name.last",id:"name.last",togglerLabel:"Last names",children:[(0,jsx_runtime.jsx)(Header,{children:"Last name"}),(0,jsx_runtime.jsx)(Footer,{children:"lastName"})]})]}),(0,jsx_runtime.jsxs)(ColumnGroup,{children:[(0,jsx_runtime.jsx)(Header,{children:"Info"}),(0,jsx_runtime.jsx)(Footer,{children:"info"}),(0,jsx_runtime.jsxs)(Column,{accessor:"age",id:"age",togglerLabel:"Ages",children:[(0,jsx_runtime.jsx)(Header,{children:"Age"}),(0,jsx_runtime.jsx)(Footer,{children:"age"})]}),(0,jsx_runtime.jsxs)(ColumnGroup,{children:[(0,jsx_runtime.jsx)(Header,{children:"More info"}),(0,jsx_runtime.jsxs)(Column,{accessor:"visits",id:"visits",togglerLabel:"Visits",children:[(0,jsx_runtime.jsx)(Header,{children:"Visits"}),(0,jsx_runtime.jsx)(Footer,{children:"visits"})]}),(0,jsx_runtime.jsxs)(Column,{accessor:"status",id:"status",togglerLabel:"Statuses",children:[(0,jsx_runtime.jsx)(Header,{children:"Status"}),(0,jsx_runtime.jsx)(Footer,{children:"status"})]}),(0,jsx_runtime.jsxs)(Column,{accessor:"progress",id:"progress",width:50,sortable:!1,togglerLabel:"Progresses",children:[(0,jsx_runtime.jsx)(Header,{children:"Progress"}),(0,jsx_runtime.jsx)(Footer,{children:"progress"})]})]})]})]})})};Resizable.displayName="Resizable";const ResizeOnRelease=()=>{const{staticData:staticData}=useTableStory(60);return(0,jsx_runtime.jsx)(components.iA_,{dataset:staticData,id:"basic-table",endMessage:"",resizableColumns:!0,resizeColumnOnReleaseMouseButton:!0,children:({Column:Column,Cell:Cell,ColumnGroup:ColumnGroup,Footer:Footer,Header:Header})=>(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(Column,{accessor:"id",width:10,id:"id",resizable:!1,togglerLabel:"User IDs",hidden:!0,children:(0,jsx_runtime.jsx)(Cell,{children:(_data,index)=>(index+1).toString().padStart(3,"0")})}),(0,jsx_runtime.jsxs)(ColumnGroup,{children:[(0,jsx_runtime.jsx)(Header,{children:"Hello"}),(0,jsx_runtime.jsx)(Column,{accessor:"name.first",id:"name.first",togglerLabel:"First names",children:(0,jsx_runtime.jsx)(Footer,{children:"firstName"})}),(0,jsx_runtime.jsxs)(Column,{accessor:"name.last",id:"name.last",togglerLabel:"Last names",children:[(0,jsx_runtime.jsx)(Header,{children:"Last name"}),(0,jsx_runtime.jsx)(Footer,{children:"lastName"})]})]}),(0,jsx_runtime.jsxs)(ColumnGroup,{children:[(0,jsx_runtime.jsx)(Header,{children:"Info"}),(0,jsx_runtime.jsx)(Footer,{children:"info"}),(0,jsx_runtime.jsxs)(Column,{accessor:"age",id:"age",togglerLabel:"Ages",children:[(0,jsx_runtime.jsx)(Header,{children:"Age"}),(0,jsx_runtime.jsx)(Footer,{children:"age"})]}),(0,jsx_runtime.jsxs)(ColumnGroup,{children:[(0,jsx_runtime.jsx)(Header,{children:"More info"}),(0,jsx_runtime.jsxs)(Column,{accessor:"visits",id:"visits",togglerLabel:"Visits",children:[(0,jsx_runtime.jsx)(Header,{children:"Visits"}),(0,jsx_runtime.jsx)(Footer,{children:"visits"})]}),(0,jsx_runtime.jsxs)(Column,{accessor:"status",id:"status",togglerLabel:"Statuses",children:[(0,jsx_runtime.jsx)(Header,{children:"Status"}),(0,jsx_runtime.jsx)(Footer,{children:"status"})]}),(0,jsx_runtime.jsxs)(Column,{accessor:"progress",id:"progress",width:50,sortable:!1,togglerLabel:"Progresses",children:[(0,jsx_runtime.jsx)(Header,{children:"Progress"}),(0,jsx_runtime.jsx)(Footer,{children:"progress"})]})]})]})]})})};ResizeOnRelease.displayName="ResizeOnRelease";const Sortable=()=>{const{staticData:staticData}=useTableStory(60);return(0,jsx_runtime.jsx)(components.iA_,{dataset:staticData,id:"basic-table",sortable:!0,children:({Column:Column,Cell:Cell,ColumnGroup:ColumnGroup,Footer:Footer,Header:Header})=>(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(Column,{accessor:"id",width:10,id:"id",resizable:!1,togglerLabel:"User IDs",hidden:!0,children:(0,jsx_runtime.jsx)(Cell,{children:(_data,index)=>(index+1).toString().padStart(3,"0")})}),(0,jsx_runtime.jsxs)(ColumnGroup,{children:[(0,jsx_runtime.jsx)(Header,{children:"Hello"}),(0,jsx_runtime.jsx)(Column,{accessor:"name.first",id:"name.first",togglerLabel:"First names",children:(0,jsx_runtime.jsx)(Footer,{children:"firstName"})}),(0,jsx_runtime.jsxs)(Column,{accessor:"name.last",id:"name.last",togglerLabel:"Last names",children:[(0,jsx_runtime.jsx)(Header,{children:"Last name"}),(0,jsx_runtime.jsx)(Footer,{children:"lastName"})]})]}),(0,jsx_runtime.jsxs)(ColumnGroup,{children:[(0,jsx_runtime.jsx)(Header,{children:"Info"}),(0,jsx_runtime.jsx)(Footer,{children:"info"}),(0,jsx_runtime.jsxs)(Column,{accessor:"age",id:"age",togglerLabel:"Ages",children:[(0,jsx_runtime.jsx)(Header,{children:"Age"}),(0,jsx_runtime.jsx)(Footer,{children:"age"})]}),(0,jsx_runtime.jsxs)(ColumnGroup,{children:[(0,jsx_runtime.jsx)(Header,{children:"More info"}),(0,jsx_runtime.jsxs)(Column,{accessor:"visits",id:"visits",togglerLabel:"Visits",children:[(0,jsx_runtime.jsx)(Header,{children:"Visits"}),(0,jsx_runtime.jsx)(Footer,{children:"visits"})]}),(0,jsx_runtime.jsxs)(Column,{accessor:"status",id:"status",togglerLabel:"Statuses",children:[(0,jsx_runtime.jsx)(Header,{children:"Status"}),(0,jsx_runtime.jsx)(Footer,{children:"status"})]}),(0,jsx_runtime.jsxs)(Column,{accessor:"progress",id:"progress",width:50,sortable:!1,togglerLabel:"Progresses",children:[(0,jsx_runtime.jsx)(Header,{children:"Progress"}),(0,jsx_runtime.jsx)(Footer,{children:"progress"})]})]})]})]})})};Sortable.displayName="Sortable";const Selectable=()=>{const{staticData:staticData}=useTableStory(60);return(0,jsx_runtime.jsx)(components.iA_,{dataset:staticData,id:"basic-table",selectable:!0,children:({Column:Column,Cell:Cell,ColumnGroup:ColumnGroup,Footer:Footer,Header:Header})=>(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(Column,{accessor:"id",width:10,id:"id",resizable:!1,togglerLabel:"User IDs",hidden:!0,children:(0,jsx_runtime.jsx)(Cell,{children:(_data,index)=>(index+1).toString().padStart(3,"0")})}),(0,jsx_runtime.jsxs)(ColumnGroup,{children:[(0,jsx_runtime.jsx)(Header,{children:"Hello"}),(0,jsx_runtime.jsx)(Column,{accessor:"name.first",id:"name.first",togglerLabel:"First names",children:(0,jsx_runtime.jsx)(Footer,{children:"firstName"})}),(0,jsx_runtime.jsxs)(Column,{accessor:"name.last",id:"name.last",togglerLabel:"Last names",children:[(0,jsx_runtime.jsx)(Header,{children:"Last name"}),(0,jsx_runtime.jsx)(Footer,{children:"lastName"})]})]}),(0,jsx_runtime.jsxs)(ColumnGroup,{children:[(0,jsx_runtime.jsx)(Header,{children:"Info"}),(0,jsx_runtime.jsx)(Footer,{children:"info"}),(0,jsx_runtime.jsxs)(Column,{accessor:"age",id:"age",togglerLabel:"Ages",children:[(0,jsx_runtime.jsx)(Header,{children:"Age"}),(0,jsx_runtime.jsx)(Footer,{children:"age"})]}),(0,jsx_runtime.jsxs)(ColumnGroup,{children:[(0,jsx_runtime.jsx)(Header,{children:"More info"}),(0,jsx_runtime.jsxs)(Column,{accessor:"visits",id:"visits",togglerLabel:"Visits",children:[(0,jsx_runtime.jsx)(Header,{children:"Visits"}),(0,jsx_runtime.jsx)(Footer,{children:"visits"})]}),(0,jsx_runtime.jsxs)(Column,{accessor:"status",id:"status",togglerLabel:"Statuses",children:[(0,jsx_runtime.jsx)(Header,{children:"Status"}),(0,jsx_runtime.jsx)(Footer,{children:"status"})]}),(0,jsx_runtime.jsxs)(Column,{accessor:"progress",id:"progress",width:50,sortable:!1,togglerLabel:"Progresses",children:[(0,jsx_runtime.jsx)(Header,{children:"Progress"}),(0,jsx_runtime.jsx)(Footer,{children:"progress"})]})]})]})]})})};Selectable.displayName="Selectable";const ConditionallySelectable=()=>{const{staticData:staticData}=useTableStory(60);return(0,jsx_runtime.jsx)(components.iA_,{dataset:staticData,id:"basic-table",selectable:row=>row.age>5,children:({Column:Column,Cell:Cell,ColumnGroup:ColumnGroup,Footer:Footer,Header:Header})=>(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(Column,{accessor:"id",width:10,id:"id",resizable:!1,togglerLabel:"User IDs",hidden:!0,children:(0,jsx_runtime.jsx)(Cell,{children:(_data,index)=>(index+1).toString().padStart(3,"0")})}),(0,jsx_runtime.jsxs)(ColumnGroup,{children:[(0,jsx_runtime.jsx)(Header,{children:"Hello"}),(0,jsx_runtime.jsx)(Column,{accessor:"name.first",id:"name.first",togglerLabel:"First names",children:(0,jsx_runtime.jsx)(Footer,{children:"firstName"})}),(0,jsx_runtime.jsxs)(Column,{accessor:"name.last",id:"name.last",togglerLabel:"Last names",children:[(0,jsx_runtime.jsx)(Header,{children:"Last name"}),(0,jsx_runtime.jsx)(Footer,{children:"lastName"})]})]}),(0,jsx_runtime.jsxs)(ColumnGroup,{children:[(0,jsx_runtime.jsx)(Header,{children:"Info"}),(0,jsx_runtime.jsx)(Footer,{children:"info"}),(0,jsx_runtime.jsxs)(Column,{accessor:"age",id:"age",togglerLabel:"Ages",children:[(0,jsx_runtime.jsx)(Header,{children:"Age"}),(0,jsx_runtime.jsx)(Footer,{children:"age"})]}),(0,jsx_runtime.jsxs)(ColumnGroup,{children:[(0,jsx_runtime.jsx)(Header,{children:"More info"}),(0,jsx_runtime.jsxs)(Column,{accessor:"visits",id:"visits",togglerLabel:"Visits",children:[(0,jsx_runtime.jsx)(Header,{children:"Visits"}),(0,jsx_runtime.jsx)(Footer,{children:"visits"})]}),(0,jsx_runtime.jsxs)(Column,{accessor:"status",id:"status",togglerLabel:"Statuses",children:[(0,jsx_runtime.jsx)(Header,{children:"Status"}),(0,jsx_runtime.jsx)(Footer,{children:"status"})]}),(0,jsx_runtime.jsxs)(Column,{accessor:"progress",id:"progress",width:50,sortable:!1,togglerLabel:"Progresses",children:[(0,jsx_runtime.jsx)(Header,{children:"Progress"}),(0,jsx_runtime.jsx)(Footer,{children:"progress"})]})]})]})]})})};ConditionallySelectable.displayName="ConditionallySelectable";const Expandable=()=>{const{staticData:staticData}=useTableStory(60);return(0,jsx_runtime.jsx)(components.iA_,{dataset:staticData,id:"basic-table",renderRowExpanded:data=>(0,jsx_runtime.jsx)("pre",{style:{margin:0},children:JSON.stringify(data,null,4)}),children:({Column:Column,Cell:Cell,ColumnGroup:ColumnGroup,Footer:Footer,Header:Header})=>(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(Column,{accessor:"id",width:10,id:"id",resizable:!1,togglerLabel:"User IDs",hidden:!0,children:(0,jsx_runtime.jsx)(Cell,{children:(_data,index)=>(index+1).toString().padStart(3,"0")})}),(0,jsx_runtime.jsxs)(ColumnGroup,{children:[(0,jsx_runtime.jsx)(Header,{children:"Hello"}),(0,jsx_runtime.jsx)(Column,{accessor:"name.first",id:"name.first",togglerLabel:"First names",children:(0,jsx_runtime.jsx)(Footer,{children:"firstName"})}),(0,jsx_runtime.jsxs)(Column,{accessor:"name.last",id:"name.last",togglerLabel:"Last names",children:[(0,jsx_runtime.jsx)(Header,{children:"Last name"}),(0,jsx_runtime.jsx)(Footer,{children:"lastName"})]})]}),(0,jsx_runtime.jsxs)(ColumnGroup,{children:[(0,jsx_runtime.jsx)(Header,{children:"Info"}),(0,jsx_runtime.jsx)(Footer,{children:"info"}),(0,jsx_runtime.jsxs)(Column,{accessor:"age",id:"age",togglerLabel:"Ages",children:[(0,jsx_runtime.jsx)(Header,{children:"Age"}),(0,jsx_runtime.jsx)(Footer,{children:"age"})]}),(0,jsx_runtime.jsxs)(ColumnGroup,{children:[(0,jsx_runtime.jsx)(Header,{children:"More info"}),(0,jsx_runtime.jsxs)(Column,{accessor:"visits",id:"visits",togglerLabel:"Visits",children:[(0,jsx_runtime.jsx)(Header,{children:"Visits"}),(0,jsx_runtime.jsx)(Footer,{children:"visits"})]}),(0,jsx_runtime.jsxs)(Column,{accessor:"status",id:"status",togglerLabel:"Statuses",children:[(0,jsx_runtime.jsx)(Header,{children:"Status"}),(0,jsx_runtime.jsx)(Footer,{children:"status"})]}),(0,jsx_runtime.jsxs)(Column,{accessor:"progress",id:"progress",width:50,sortable:!1,togglerLabel:"Progresses",children:[(0,jsx_runtime.jsx)(Header,{children:"Progress"}),(0,jsx_runtime.jsx)(Footer,{children:"progress"})]})]})]})]})})};Expandable.displayName="Expandable";const ConditionallyExpandable=()=>{const{staticData:staticData}=useTableStory(60);return(0,jsx_runtime.jsx)(components.iA_,{dataset:staticData,id:"basic-table",selectable:!0,isRowExpandable:row=>row.age>5,renderRowExpanded:data=>(0,jsx_runtime.jsx)("pre",{style:{margin:0},children:JSON.stringify(data,null,4)}),children:({Column:Column,Cell:Cell,ColumnGroup:ColumnGroup,Footer:Footer,Header:Header})=>(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(Column,{accessor:"id",width:10,id:"id",resizable:!1,togglerLabel:"User IDs",hidden:!0,children:(0,jsx_runtime.jsx)(Cell,{children:(_data,index)=>(index+1).toString().padStart(3,"0")})}),(0,jsx_runtime.jsxs)(ColumnGroup,{children:[(0,jsx_runtime.jsx)(Header,{children:"Hello"}),(0,jsx_runtime.jsx)(Column,{accessor:"name.first",id:"name.first",togglerLabel:"First names",children:(0,jsx_runtime.jsx)(Footer,{children:"firstName"})}),(0,jsx_runtime.jsxs)(Column,{accessor:"name.last",id:"name.last",togglerLabel:"Last names",children:[(0,jsx_runtime.jsx)(Header,{children:"Last name"}),(0,jsx_runtime.jsx)(Footer,{children:"lastName"})]})]}),(0,jsx_runtime.jsxs)(ColumnGroup,{children:[(0,jsx_runtime.jsx)(Header,{children:"Info"}),(0,jsx_runtime.jsx)(Footer,{children:"info"}),(0,jsx_runtime.jsxs)(Column,{accessor:"age",id:"age",togglerLabel:"Ages",children:[(0,jsx_runtime.jsx)(Header,{children:"Age"}),(0,jsx_runtime.jsx)(Footer,{children:"age"})]}),(0,jsx_runtime.jsxs)(ColumnGroup,{children:[(0,jsx_runtime.jsx)(Header,{children:"More info"}),(0,jsx_runtime.jsxs)(Column,{accessor:"visits",id:"visits",togglerLabel:"Visits",children:[(0,jsx_runtime.jsx)(Header,{children:"Visits"}),(0,jsx_runtime.jsx)(Footer,{children:"visits"})]}),(0,jsx_runtime.jsxs)(Column,{accessor:"status",id:"status",togglerLabel:"Statuses",children:[(0,jsx_runtime.jsx)(Header,{children:"Status"}),(0,jsx_runtime.jsx)(Footer,{children:"status"})]}),(0,jsx_runtime.jsxs)(Column,{accessor:"progress",id:"progress",width:50,sortable:!1,togglerLabel:"Progresses",children:[(0,jsx_runtime.jsx)(Header,{children:"Progress"}),(0,jsx_runtime.jsx)(Footer,{children:"progress"})]})]})]})]})})};ConditionallyExpandable.displayName="ConditionallyExpandable";const Virtualized=()=>{const{staticData:staticData}=useTableStory(1e3);return(0,jsx_runtime.jsx)(components.iA_,{dataset:staticData,id:"basic-table",resizableColumns:!1,renderActionsBar:!1,renderHeader:!1,virtualized:{estimateRowSize:27},children:({Column:Column})=>(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(Column,{accessor:"name.first"}),(0,jsx_runtime.jsx)(Column,{accessor:"name.last"}),(0,jsx_runtime.jsx)(Column,{accessor:"age"}),(0,jsx_runtime.jsx)(Column,{accessor:"progress"})]})})};Virtualized.displayName="Virtualized";const InfiniteScroll=()=>{const{data:data,isLoading:isLoading,sendQuery:sendQuery}=useTableStory(1e3);return(0,jsx_runtime.jsx)(components.iA_,{dataset:data,id:"basic-table",resizableColumns:!1,renderActionsBar:!1,renderFooter:!0,renderHeader:!1,loading:isLoading,infiniteScroll:{handleOnLoadMore:sendQuery,maxDatasetLength:1e3},children:({Column:Column})=>(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(Column,{accessor:"name.first"}),(0,jsx_runtime.jsx)(Column,{accessor:"name.last"}),(0,jsx_runtime.jsx)(Column,{accessor:"age"}),(0,jsx_runtime.jsx)(Column,{accessor:"progress"})]})})};InfiniteScroll.displayName="InfiniteScroll";const VirtualizedInfiniteScroll=()=>{const{data:data,isLoading:isLoading,sendQuery:sendQuery}=useTableStory(1e3);return(0,jsx_runtime.jsx)(components.iA_,{dataset:data,id:"basic-table",resizableColumns:!1,renderActionsBar:!1,renderHeader:!1,loading:isLoading,infiniteScroll:{handleOnLoadMore:sendQuery,maxDatasetLength:1e3},renderFooter:!0,virtualized:{estimateRowSize:27},children:({Column:Column})=>(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(Column,{accessor:"name.first"}),(0,jsx_runtime.jsx)(Column,{accessor:"name.last"}),(0,jsx_runtime.jsx)(Column,{accessor:"age"}),(0,jsx_runtime.jsx)(Column,{accessor:"progress"})]})})};VirtualizedInfiniteScroll.displayName="VirtualizedInfiniteScroll";const EmptyState=()=>(0,jsx_runtime.jsx)(components.iA_,{dataset:[],id:"basic-table",endMessage:"",resizableColumns:!1,renderActionsBar:!1,renderFooter:!0,children:({Column:Column,Header:Header,Footer:Footer})=>(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsxs)(Column,{accessor:"name.first",children:[(0,jsx_runtime.jsx)(Header,{children:"First name"}),(0,jsx_runtime.jsx)(Footer,{children:"First name"})]}),(0,jsx_runtime.jsxs)(Column,{accessor:"name.last",children:[(0,jsx_runtime.jsx)(Header,{children:"Last name"}),(0,jsx_runtime.jsx)(Footer,{children:"Last name"})]}),(0,jsx_runtime.jsxs)(Column,{accessor:"age",children:[(0,jsx_runtime.jsx)(Header,{children:"Age"}),(0,jsx_runtime.jsx)(Footer,{children:"Age"})]}),(0,jsx_runtime.jsxs)(Column,{accessor:"progress",children:[(0,jsx_runtime.jsx)(Header,{children:"Progress"}),(0,jsx_runtime.jsx)(Footer,{children:"Progress"})]})]})});EmptyState.displayName="EmptyState";const LoadingWithoutData=()=>(0,jsx_runtime.jsx)(components.iA_,{dataset:[],id:"basic-table",endMessage:"",resizableColumns:!1,renderActionsBar:!1,renderFooter:!0,loading:!0,children:({Column:Column,Header:Header,Footer:Footer})=>(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsxs)(Column,{accessor:"name.first",children:[(0,jsx_runtime.jsx)(Header,{children:"First name"}),(0,jsx_runtime.jsx)(Footer,{children:"First name"})]}),(0,jsx_runtime.jsxs)(Column,{accessor:"name.last",children:[(0,jsx_runtime.jsx)(Header,{children:"Last name"}),(0,jsx_runtime.jsx)(Footer,{children:"Last name"})]}),(0,jsx_runtime.jsxs)(Column,{accessor:"age",children:[(0,jsx_runtime.jsx)(Header,{children:"Age"}),(0,jsx_runtime.jsx)(Footer,{children:"Age"})]}),(0,jsx_runtime.jsxs)(Column,{accessor:"progress",children:[(0,jsx_runtime.jsx)(Header,{children:"Progress"}),(0,jsx_runtime.jsx)(Footer,{children:"Progress"})]})]})});LoadingWithoutData.displayName="LoadingWithoutData";const LoadingWithData=()=>{const{staticData:staticData}=useTableStory(10);return(0,jsx_runtime.jsx)(components.iA_,{dataset:staticData,id:"basic-table",endMessage:"",resizableColumns:!1,renderActionsBar:!1,renderFooter:!0,loading:!0,children:({Column:Column,Header:Header,Footer:Footer})=>(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsxs)(Column,{accessor:"name.first",children:[(0,jsx_runtime.jsx)(Header,{children:"First name"}),(0,jsx_runtime.jsx)(Footer,{children:"First name"})]}),(0,jsx_runtime.jsxs)(Column,{accessor:"name.last",children:[(0,jsx_runtime.jsx)(Header,{children:"Last name"}),(0,jsx_runtime.jsx)(Footer,{children:"Last name"})]}),(0,jsx_runtime.jsxs)(Column,{accessor:"age",children:[(0,jsx_runtime.jsx)(Header,{children:"Age"}),(0,jsx_runtime.jsx)(Footer,{children:"Age"})]}),(0,jsx_runtime.jsxs)(Column,{accessor:"progress",children:[(0,jsx_runtime.jsx)(Header,{children:"Progress"}),(0,jsx_runtime.jsx)(Footer,{children:"Progress"})]})]})})};LoadingWithData.displayName="LoadingWithData";var table_story={title:"Data display/Table",component:components.iA_,args:{id:"playground-table",title:"Playground table shows person records",renderFooter:!0,selectable:!0,hoverable:!1,striped:!0,stickyActions:!0,sortable:!0,useDefaultSortAlgorithm:!0,dragToSelect:!0,debounceSearchInput:!0,fullHeight:!1,renderHeader:!0,renderActionsBar:!0,resizableColumns:!0,showColumnsButton:!0,showSearch:!0,stickyFooter:!0,stickyHeader:!0,loading:!1,toggleSelectOnRowClick:!0,resizeColumnOnReleaseMouseButton:!1,isRowExpandable:data=>data.age>5,actionsColumnWidth:100,renderRowExpanded:data=>(0,jsx_runtime.jsx)("pre",{style:{margin:0},children:JSON.stringify(data,null,4)}),virtualized:{estimateRowSize:30},className:"playground-table",dataset:[],maxHeight:700,maxWidth:"100%",minHeight:"unset",minWidth:"100%",endMessage:"You have seen all the rows",infiniteScroll:void 0,onSearch:void 0,onSortChange:void 0,onSelectionChange:void 0,reference:void 0,children:void 0,searchInputDebounceDelay:250,onClick:void 0,containerProps:void 0,style:void 0,actions:[{onClick:data=>{alert(JSON.stringify(data,void 0,2))},children:"Get row data"}]}};const Playground=props=>{const{data:data,isLoading:isLoading,sendQuery:sendQuery}=useCustomFetch({makeData:fixtures.tw,maxItems:400,itemsPerQuery:20});return(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children:(0,jsx_runtime.jsx)(components.iA_,{...props,dataset:data,infiniteScroll:{handleOnLoadMore:sendQuery,maxDatasetLength:400},loading:isLoading,children:({Cell:Cell,Column:Column,Footer:Footer,Header:Header,ColumnGroup:ColumnGroup})=>(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(Column,{accessor:"id",width:10,id:"id",resizable:!1,togglerLabel:"User IDs",hidden:!0,children:(0,jsx_runtime.jsx)(Cell,{children:(_data,index)=>(index+1).toString().padStart(3,"0")})}),(0,jsx_runtime.jsxs)(ColumnGroup,{children:[(0,jsx_runtime.jsx)(Header,{children:"Hello"}),(0,jsx_runtime.jsx)(Column,{accessor:"name.first",id:"name.first",togglerLabel:"First names",children:(0,jsx_runtime.jsx)(Footer,{children:"firstName"})}),(0,jsx_runtime.jsxs)(Column,{accessor:"name.last",id:"name.last",togglerLabel:"Last names",children:[(0,jsx_runtime.jsx)(Header,{children:"Last name"}),(0,jsx_runtime.jsx)(Footer,{children:"lastName"})]})]}),(0,jsx_runtime.jsxs)(ColumnGroup,{children:[(0,jsx_runtime.jsx)(Header,{children:"Info"}),(0,jsx_runtime.jsx)(Footer,{children:"info"}),(0,jsx_runtime.jsxs)(Column,{accessor:"age",id:"age",togglerLabel:"Ages",children:[(0,jsx_runtime.jsx)(Header,{children:"Age"}),(0,jsx_runtime.jsx)(Footer,{children:"age"})]}),(0,jsx_runtime.jsxs)(ColumnGroup,{children:[(0,jsx_runtime.jsx)(Header,{children:"More info"}),(0,jsx_runtime.jsxs)(Column,{accessor:"visits",id:"visits",togglerLabel:"Visits",children:[(0,jsx_runtime.jsx)(Header,{children:"Visits"}),(0,jsx_runtime.jsx)(Footer,{children:"visits"})]}),(0,jsx_runtime.jsxs)(Column,{accessor:"status",id:"status",togglerLabel:"Statuses",summary:1e3,children:[(0,jsx_runtime.jsx)(Header,{children:"Status"}),(0,jsx_runtime.jsx)(Footer,{children:"status"})]}),(0,jsx_runtime.jsxs)(Column,{accessor:"progress",id:"progress",width:50,sortable:!1,togglerLabel:"Progresses",summary:1e3,children:[(0,jsx_runtime.jsx)(Header,{children:"Progress"}),(0,jsx_runtime.jsx)(Footer,{children:"progress"})]})]})]})]})})})};Basic.parameters={...Basic.parameters,docs:{...Basic.parameters?.docs,source:{originalSource:'() => {\n  const {\n    staticData\n  } = useTableStory(10);\n  return <Table dataset={staticData} id="basic-table" endMessage="" resizableColumns={false} renderActionsBar={false} renderHeader={false}>\n      {({\n      Column\n    }) => <>\n          <Column accessor="name.first" />\n          <Column accessor="name.last" />\n          <Column accessor="age" />\n          <Column accessor="progress" />\n        </>}\n    </Table>;\n}',...Basic.parameters?.docs?.source}}},WithHeader.parameters={...WithHeader.parameters,docs:{...WithHeader.parameters?.docs,source:{originalSource:'() => {\n  const {\n    staticData\n  } = useTableStory(10);\n  return <Table dataset={staticData} id="basic-table" endMessage="" resizableColumns={false} renderActionsBar={false}>\n      {({\n      Column,\n      Header\n    }) => <>\n          <Column accessor="name.first">\n            <Header>First name</Header>\n          </Column>\n          <Column accessor="name.last">\n            <Header>Last name</Header>\n          </Column>\n          <Column accessor="age">\n            <Header>Age</Header>\n          </Column>\n          <Column accessor="progress">\n            <Header>Progress</Header>\n          </Column>\n        </>}\n    </Table>;\n}',...WithHeader.parameters?.docs?.source}}},WithHeaderAndFooter.parameters={...WithHeaderAndFooter.parameters,docs:{...WithHeaderAndFooter.parameters?.docs,source:{originalSource:'() => {\n  const {\n    staticData\n  } = useTableStory(10);\n  return <Table dataset={staticData} id="basic-table" endMessage="" renderFooter resizableColumns={false} renderActionsBar={false}>\n      {({\n      Column,\n      Header,\n      Footer\n    }) => <>\n          <Column accessor="name.first">\n            <Header>First name</Header>\n            <Footer>First name</Footer>\n          </Column>\n          <Column accessor="name.last">\n            <Header>Last name</Header>\n            <Footer>Last name</Footer>\n          </Column>\n          <Column accessor="age">\n            <Header>Age</Header>\n            <Footer>Age</Footer>\n          </Column>\n          <Column accessor="progress">\n            <Header>Progress</Header>\n            <Footer>Progress</Footer>\n          </Column>\n        </>}\n    </Table>;\n}',...WithHeaderAndFooter.parameters?.docs?.source}}},StickyHeaderAndFooter.parameters={...StickyHeaderAndFooter.parameters,docs:{...StickyHeaderAndFooter.parameters?.docs,source:{originalSource:'() => {\n  const {\n    staticData\n  } = useTableStory(100);\n  return <Table dataset={staticData} id="basic-table" endMessage="" renderFooter resizableColumns={false} renderActionsBar={false} stickyHeader stickyFooter>\n      {({\n      Column,\n      Header,\n      Footer\n    }) => <>\n          <Column accessor="name.first">\n            <Header>First name</Header>\n            <Footer>First name</Footer>\n          </Column>\n          <Column accessor="name.last">\n            <Header>Last name</Header>\n            <Footer>Last name</Footer>\n          </Column>\n          <Column accessor="age">\n            <Header>Age</Header>\n            <Footer>Age</Footer>\n          </Column>\n          <Column accessor="progress">\n            <Header>Progress</Header>\n            <Footer>Progress</Footer>\n          </Column>\n        </>}\n    </Table>;\n}',...StickyHeaderAndFooter.parameters?.docs?.source}}},CustomCells.parameters={...CustomCells.parameters,docs:{...CustomCells.parameters?.docs,source:{originalSource:'() => {\n  const {\n    staticData\n  } = useTableStory(10);\n  return <Table dataset={staticData} id="basic-table" endMessage="" resizableColumns={false} renderActionsBar={false}>\n      {({\n      Column,\n      Header,\n      Cell\n    }) => <>\n          <Column accessor="name.first">\n            <Header>First name</Header>\n          </Column>\n          <Column accessor="name.last">\n            <Header>Last name</Header>\n          </Column>\n          <Column accessor="age">\n            <Header>Age</Header>\n          </Column>\n          <Column accessor="progress">\n            <Header>Progress</Header>\n            <Cell>\n              {data => <Progress type="circular" circularSize={30} circularStroke={6} info="percentage" showInfo circularPercentageFontSize={10} steps={{\n            percentage: data.progress\n          }} />}\n            </Cell>\n          </Column>\n        </>}\n    </Table>;\n}',...CustomCells.parameters?.docs?.source}}},Striped.parameters={...Striped.parameters,docs:{...Striped.parameters?.docs,source:{originalSource:'() => {\n  const {\n    staticData\n  } = useTableStory(10);\n  return <Table dataset={staticData} id="basic-table" endMessage="" striped resizableColumns={false} renderActionsBar={false}>\n      {({\n      Column,\n      Header\n    }) => <>\n          <Column accessor="name.first">\n            <Header>First name</Header>\n          </Column>\n          <Column accessor="name.last">\n            <Header>Last name</Header>\n          </Column>\n          <Column accessor="age">\n            <Header>Age</Header>\n          </Column>\n          <Column accessor="progress">\n            <Header>Progress</Header>\n          </Column>\n        </>}\n    </Table>;\n}',...Striped.parameters?.docs?.source}}},Hoverable.parameters={...Hoverable.parameters,docs:{...Hoverable.parameters?.docs,source:{originalSource:'() => {\n  const {\n    staticData\n  } = useTableStory(10);\n  return <Table dataset={staticData} id="basic-table" endMessage="" hoverable resizableColumns={false} renderActionsBar={false}>\n      {({\n      Column,\n      Header\n    }) => <>\n          <Column accessor="name.first">\n            <Header>First name</Header>\n          </Column>\n          <Column accessor="name.last">\n            <Header>Last name</Header>\n          </Column>\n          <Column accessor="age">\n            <Header>Age</Header>\n          </Column>\n          <Column accessor="progress">\n            <Header>Progress</Header>\n          </Column>\n        </>}\n    </Table>;\n}',...Hoverable.parameters?.docs?.source}}},WithActions.parameters={...WithActions.parameters,docs:{...WithActions.parameters?.docs,source:{originalSource:'() => {\n  const {\n    staticData\n  } = useTableStory(10);\n  return <Table dataset={staticData} id="basic-table" endMessage="" resizableColumns={false} renderActionsBar={false} actions={[{\n    onClick: data => {\n      alert(JSON.stringify(data, null, 2));\n    },\n    children: \'Alert data\',\n    type: \'bordered\',\n    style: {\n      margin: 6\n    }\n  }]}>\n      {({\n      Column,\n      Header\n    }) => <>\n          <Column accessor="name.first">\n            <Header>First name</Header>\n          </Column>\n          <Column accessor="name.last">\n            <Header>Last name</Header>\n          </Column>\n          <Column accessor="age">\n            <Header>Age</Header>\n          </Column>\n          <Column accessor="progress">\n            <Header>Progress</Header>\n          </Column>\n        </>}\n    </Table>;\n}',...WithActions.parameters?.docs?.source}}},StickyActions.parameters={...StickyActions.parameters,docs:{...StickyActions.parameters?.docs,source:{originalSource:'() => {\n  const {\n    staticData\n  } = useTableStory(10);\n  return <Table dataset={staticData} id="basic-table" endMessage="" resizableColumns={false} renderActionsBar={false} stickyActions actions={[{\n    onClick: data => {\n      alert(JSON.stringify(data, null, 2));\n    },\n    children: \'Alert data\',\n    type: \'bordered\',\n    style: {\n      margin: 6\n    }\n  }]}>\n      {({\n      Column,\n      Header\n    }) => <>\n          <Column accessor="name.first">\n            <Header>First name</Header>\n          </Column>\n          <Column accessor="name.last">\n            <Header>Last name</Header>\n          </Column>\n          <Column accessor="age">\n            <Header>Age</Header>\n          </Column>\n          <Column accessor="progress">\n            <Header>Progress</Header>\n          </Column>\n          <Column accessor="address" width={500} />\n        </>}\n    </Table>;\n}',...StickyActions.parameters?.docs?.source}}},ActionBar.parameters={...ActionBar.parameters,docs:{...ActionBar.parameters?.docs,source:{originalSource:'() => {\n  const {\n    staticData\n  } = useTableStory(10);\n  return <Table dataset={staticData} id="basic-table" endMessage="" resizableColumns={false} renderHeader={false} title="Table with action bar">\n      {({\n      Column\n    }) => <>\n          <Column accessor="name.first" togglerLabel="First name" />\n          <Column accessor="name.last" togglerLabel="Last name" />\n          <Column accessor="age" togglerLabel="Age" />\n          <Column accessor="progress" togglerLabel="Progress" />\n        </>}\n    </Table>;\n}',...ActionBar.parameters?.docs?.source}}},FullHeight.parameters={...FullHeight.parameters,docs:{...FullHeight.parameters?.docs,source:{originalSource:'() => {\n  const {\n    staticData\n  } = useTableStory(100);\n  return <Table dataset={staticData} id="basic-table" endMessage="" resizableColumns={false} title="Table with action bar" maxHeight="unset" fullHeight renderFooter stickyFooter stickyHeader>\n      {({\n      Column,\n      Footer\n    }) => <>\n          <Column accessor="name.first" togglerLabel="First name">\n            <Footer>First name</Footer>\n          </Column>\n          <Column accessor="name.last" togglerLabel="Last name">\n            <Footer>Last name</Footer>\n          </Column>\n          <Column accessor="age" togglerLabel="Age">\n            <Footer>Age</Footer>\n          </Column>\n          <Column accessor="progress" togglerLabel="Progress">\n            <Footer>Progress</Footer>\n          </Column>\n        </>}\n    </Table>;\n}',...FullHeight.parameters?.docs?.source}}},GroupedColumns.parameters={...GroupedColumns.parameters,docs:{...GroupedColumns.parameters?.docs,source:{originalSource:'() => {\n  const {\n    staticData\n  } = useTableStory(60);\n  return <Table dataset={staticData} id="basic-table" endMessage="" resizableColumns={false} renderActionsBar={false}>\n      {({\n      Column,\n      Cell,\n      ColumnGroup,\n      Footer,\n      Header\n    }) => <>\n          <Column accessor="id" width={10} id="id" resizable={false} togglerLabel="User IDs" hidden>\n            <Cell>{(_data, index) => (index + 1).toString().padStart(3, \'0\')}</Cell>\n          </Column>\n\n          <ColumnGroup>\n            <Header>Hello</Header>\n            <Column accessor="name.first" id="name.first" togglerLabel="First names">\n              <Footer>firstName</Footer>\n            </Column>\n            <Column accessor="name.last" id="name.last" togglerLabel="Last names">\n              <Header>Last name</Header>\n              <Footer>lastName</Footer>\n            </Column>\n          </ColumnGroup>\n\n          <ColumnGroup>\n            <Header>Info</Header>\n            <Footer>info</Footer>\n\n            <Column accessor="age" id="age" togglerLabel="Ages">\n              <Header>Age</Header>\n              <Footer>age</Footer>\n            </Column>\n\n            <ColumnGroup>\n              <Header>More info</Header>\n              <Column accessor="visits" id="visits" togglerLabel="Visits">\n                <Header>Visits</Header>\n                <Footer>visits</Footer>\n              </Column>\n              <Column accessor="status" id="status" togglerLabel="Statuses">\n                <Header>Status</Header>\n                <Footer>status</Footer>\n              </Column>\n              <Column accessor="progress" id="progress" width={50} sortable={false} togglerLabel="Progresses">\n                <Header>Progress</Header>\n                <Footer>progress</Footer>\n              </Column>\n            </ColumnGroup>\n          </ColumnGroup>\n        </>}\n    </Table>;\n}',...GroupedColumns.parameters?.docs?.source}}},ColumnSummary.parameters={...ColumnSummary.parameters,docs:{...ColumnSummary.parameters?.docs,source:{originalSource:'() => {\n  const {\n    staticData\n  } = useTableStory(60);\n  return <Table dataset={staticData} id="basic-table" endMessage="" resizableColumns={false} renderActionsBar={false}>\n      {({\n      Column,\n      Cell,\n      ColumnGroup,\n      Footer,\n      Header\n    }) => <>\n          <Column accessor="id" width={10} id="id" resizable={false} togglerLabel="User IDs" hidden>\n            <Cell>{(_data, index) => (index + 1).toString().padStart(3, \'0\')}</Cell>\n          </Column>\n\n          <ColumnGroup>\n            <Header>Hello</Header>\n            <Column accessor="name.first" id="name.first" togglerLabel="First names">\n              <Footer>firstName</Footer>\n            </Column>\n            <Column accessor="name.last" id="name.last" togglerLabel="Last names">\n              <Header>Last name</Header>\n              <Footer>lastName</Footer>\n            </Column>\n          </ColumnGroup>\n\n          <ColumnGroup>\n            <Header>Info</Header>\n            <Footer>info</Footer>\n\n            <Column accessor="age" id="age" togglerLabel="Ages">\n              <Header>Age</Header>\n              <Footer>age</Footer>\n            </Column>\n\n            <ColumnGroup>\n              <Header>More info</Header>\n              <Column accessor="visits" id="visits" togglerLabel="Visits">\n                <Header>Visits</Header>\n                <Footer>visits</Footer>\n              </Column>\n              <Column accessor="status" id="status" togglerLabel="Statuses" summary={1000}>\n                <Header>Status</Header>\n                <Footer>status</Footer>\n              </Column>\n              <Column accessor="progress" id="progress" width={50} sortable={false} togglerLabel="Progresses" summary={1000}>\n                <Header>Progress</Header>\n                <Footer>progress</Footer>\n              </Column>\n            </ColumnGroup>\n          </ColumnGroup>\n        </>}\n    </Table>;\n}',...ColumnSummary.parameters?.docs?.source}}},Resizable.parameters={...Resizable.parameters,docs:{...Resizable.parameters?.docs,source:{originalSource:'() => {\n  const {\n    staticData\n  } = useTableStory(60);\n  return <Table dataset={staticData} id="basic-table" endMessage="">\n      {({\n      Column,\n      Cell,\n      ColumnGroup,\n      Footer,\n      Header\n    }) => <>\n          <Column accessor="id" width={10} id="id" resizable={false} togglerLabel="User IDs" hidden>\n            <Cell>{(_data, index) => (index + 1).toString().padStart(3, \'0\')}</Cell>\n          </Column>\n\n          <ColumnGroup>\n            <Header>Hello</Header>\n            <Column accessor="name.first" id="name.first" togglerLabel="First names">\n              <Footer>firstName</Footer>\n            </Column>\n            <Column accessor="name.last" id="name.last" togglerLabel="Last names">\n              <Header>Last name</Header>\n              <Footer>lastName</Footer>\n            </Column>\n          </ColumnGroup>\n\n          <ColumnGroup>\n            <Header>Info</Header>\n            <Footer>info</Footer>\n\n            <Column accessor="age" id="age" togglerLabel="Ages">\n              <Header>Age</Header>\n              <Footer>age</Footer>\n            </Column>\n\n            <ColumnGroup>\n              <Header>More info</Header>\n              <Column accessor="visits" id="visits" togglerLabel="Visits">\n                <Header>Visits</Header>\n                <Footer>visits</Footer>\n              </Column>\n              <Column accessor="status" id="status" togglerLabel="Statuses">\n                <Header>Status</Header>\n                <Footer>status</Footer>\n              </Column>\n              <Column accessor="progress" id="progress" width={50} sortable={false} togglerLabel="Progresses">\n                <Header>Progress</Header>\n                <Footer>progress</Footer>\n              </Column>\n            </ColumnGroup>\n          </ColumnGroup>\n        </>}\n    </Table>;\n}',...Resizable.parameters?.docs?.source}}},ResizeOnRelease.parameters={...ResizeOnRelease.parameters,docs:{...ResizeOnRelease.parameters?.docs,source:{originalSource:'() => {\n  const {\n    staticData\n  } = useTableStory(60);\n  return <Table dataset={staticData} id="basic-table" endMessage="" resizableColumns resizeColumnOnReleaseMouseButton>\n      {({\n      Column,\n      Cell,\n      ColumnGroup,\n      Footer,\n      Header\n    }) => <>\n          <Column accessor="id" width={10} id="id" resizable={false} togglerLabel="User IDs" hidden>\n            <Cell>{(_data, index) => (index + 1).toString().padStart(3, \'0\')}</Cell>\n          </Column>\n\n          <ColumnGroup>\n            <Header>Hello</Header>\n            <Column accessor="name.first" id="name.first" togglerLabel="First names">\n              <Footer>firstName</Footer>\n            </Column>\n            <Column accessor="name.last" id="name.last" togglerLabel="Last names">\n              <Header>Last name</Header>\n              <Footer>lastName</Footer>\n            </Column>\n          </ColumnGroup>\n\n          <ColumnGroup>\n            <Header>Info</Header>\n            <Footer>info</Footer>\n\n            <Column accessor="age" id="age" togglerLabel="Ages">\n              <Header>Age</Header>\n              <Footer>age</Footer>\n            </Column>\n\n            <ColumnGroup>\n              <Header>More info</Header>\n              <Column accessor="visits" id="visits" togglerLabel="Visits">\n                <Header>Visits</Header>\n                <Footer>visits</Footer>\n              </Column>\n              <Column accessor="status" id="status" togglerLabel="Statuses">\n                <Header>Status</Header>\n                <Footer>status</Footer>\n              </Column>\n              <Column accessor="progress" id="progress" width={50} sortable={false} togglerLabel="Progresses">\n                <Header>Progress</Header>\n                <Footer>progress</Footer>\n              </Column>\n            </ColumnGroup>\n          </ColumnGroup>\n        </>}\n    </Table>;\n}',...ResizeOnRelease.parameters?.docs?.source}}},Sortable.parameters={...Sortable.parameters,docs:{...Sortable.parameters?.docs,source:{originalSource:'() => {\n  const {\n    staticData\n  } = useTableStory(60);\n  return <Table dataset={staticData} id="basic-table" sortable>\n      {({\n      Column,\n      Cell,\n      ColumnGroup,\n      Footer,\n      Header\n    }) => <>\n          <Column accessor="id" width={10} id="id" resizable={false} togglerLabel="User IDs" hidden>\n            <Cell>{(_data, index) => (index + 1).toString().padStart(3, \'0\')}</Cell>\n          </Column>\n\n          <ColumnGroup>\n            <Header>Hello</Header>\n            <Column accessor="name.first" id="name.first" togglerLabel="First names">\n              <Footer>firstName</Footer>\n            </Column>\n            <Column accessor="name.last" id="name.last" togglerLabel="Last names">\n              <Header>Last name</Header>\n              <Footer>lastName</Footer>\n            </Column>\n          </ColumnGroup>\n\n          <ColumnGroup>\n            <Header>Info</Header>\n            <Footer>info</Footer>\n\n            <Column accessor="age" id="age" togglerLabel="Ages">\n              <Header>Age</Header>\n              <Footer>age</Footer>\n            </Column>\n\n            <ColumnGroup>\n              <Header>More info</Header>\n              <Column accessor="visits" id="visits" togglerLabel="Visits">\n                <Header>Visits</Header>\n                <Footer>visits</Footer>\n              </Column>\n              <Column accessor="status" id="status" togglerLabel="Statuses">\n                <Header>Status</Header>\n                <Footer>status</Footer>\n              </Column>\n              <Column accessor="progress" id="progress" width={50} sortable={false} togglerLabel="Progresses">\n                <Header>Progress</Header>\n                <Footer>progress</Footer>\n              </Column>\n            </ColumnGroup>\n          </ColumnGroup>\n        </>}\n    </Table>;\n}',...Sortable.parameters?.docs?.source}}},Selectable.parameters={...Selectable.parameters,docs:{...Selectable.parameters?.docs,source:{originalSource:'() => {\n  const {\n    staticData\n  } = useTableStory(60);\n  return <Table dataset={staticData} id="basic-table" selectable>\n      {({\n      Column,\n      Cell,\n      ColumnGroup,\n      Footer,\n      Header\n    }) => <>\n          <Column accessor="id" width={10} id="id" resizable={false} togglerLabel="User IDs" hidden>\n            <Cell>{(_data, index) => (index + 1).toString().padStart(3, \'0\')}</Cell>\n          </Column>\n\n          <ColumnGroup>\n            <Header>Hello</Header>\n            <Column accessor="name.first" id="name.first" togglerLabel="First names">\n              <Footer>firstName</Footer>\n            </Column>\n            <Column accessor="name.last" id="name.last" togglerLabel="Last names">\n              <Header>Last name</Header>\n              <Footer>lastName</Footer>\n            </Column>\n          </ColumnGroup>\n\n          <ColumnGroup>\n            <Header>Info</Header>\n            <Footer>info</Footer>\n\n            <Column accessor="age" id="age" togglerLabel="Ages">\n              <Header>Age</Header>\n              <Footer>age</Footer>\n            </Column>\n\n            <ColumnGroup>\n              <Header>More info</Header>\n              <Column accessor="visits" id="visits" togglerLabel="Visits">\n                <Header>Visits</Header>\n                <Footer>visits</Footer>\n              </Column>\n              <Column accessor="status" id="status" togglerLabel="Statuses">\n                <Header>Status</Header>\n                <Footer>status</Footer>\n              </Column>\n              <Column accessor="progress" id="progress" width={50} sortable={false} togglerLabel="Progresses">\n                <Header>Progress</Header>\n                <Footer>progress</Footer>\n              </Column>\n            </ColumnGroup>\n          </ColumnGroup>\n        </>}\n    </Table>;\n}',...Selectable.parameters?.docs?.source}}},ConditionallySelectable.parameters={...ConditionallySelectable.parameters,docs:{...ConditionallySelectable.parameters?.docs,source:{originalSource:'() => {\n  const {\n    staticData\n  } = useTableStory(60);\n  return <Table dataset={staticData} id="basic-table" selectable={row => row.age > 5}>\n      {({\n      Column,\n      Cell,\n      ColumnGroup,\n      Footer,\n      Header\n    }) => <>\n          <Column accessor="id" width={10} id="id" resizable={false} togglerLabel="User IDs" hidden>\n            <Cell>{(_data, index) => (index + 1).toString().padStart(3, \'0\')}</Cell>\n          </Column>\n\n          <ColumnGroup>\n            <Header>Hello</Header>\n            <Column accessor="name.first" id="name.first" togglerLabel="First names">\n              <Footer>firstName</Footer>\n            </Column>\n            <Column accessor="name.last" id="name.last" togglerLabel="Last names">\n              <Header>Last name</Header>\n              <Footer>lastName</Footer>\n            </Column>\n          </ColumnGroup>\n\n          <ColumnGroup>\n            <Header>Info</Header>\n            <Footer>info</Footer>\n\n            <Column accessor="age" id="age" togglerLabel="Ages">\n              <Header>Age</Header>\n              <Footer>age</Footer>\n            </Column>\n\n            <ColumnGroup>\n              <Header>More info</Header>\n              <Column accessor="visits" id="visits" togglerLabel="Visits">\n                <Header>Visits</Header>\n                <Footer>visits</Footer>\n              </Column>\n              <Column accessor="status" id="status" togglerLabel="Statuses">\n                <Header>Status</Header>\n                <Footer>status</Footer>\n              </Column>\n              <Column accessor="progress" id="progress" width={50} sortable={false} togglerLabel="Progresses">\n                <Header>Progress</Header>\n                <Footer>progress</Footer>\n              </Column>\n            </ColumnGroup>\n          </ColumnGroup>\n        </>}\n    </Table>;\n}',...ConditionallySelectable.parameters?.docs?.source}}},Expandable.parameters={...Expandable.parameters,docs:{...Expandable.parameters?.docs,source:{originalSource:'() => {\n  const {\n    staticData\n  } = useTableStory(60);\n  return <Table dataset={staticData} id="basic-table" renderRowExpanded={data => <pre style={{\n    margin: 0\n  }}>{JSON.stringify(data, null, 4)}</pre>}>\n      {({\n      Column,\n      Cell,\n      ColumnGroup,\n      Footer,\n      Header\n    }) => <>\n          <Column accessor="id" width={10} id="id" resizable={false} togglerLabel="User IDs" hidden>\n            <Cell>{(_data, index) => (index + 1).toString().padStart(3, \'0\')}</Cell>\n          </Column>\n\n          <ColumnGroup>\n            <Header>Hello</Header>\n            <Column accessor="name.first" id="name.first" togglerLabel="First names">\n              <Footer>firstName</Footer>\n            </Column>\n            <Column accessor="name.last" id="name.last" togglerLabel="Last names">\n              <Header>Last name</Header>\n              <Footer>lastName</Footer>\n            </Column>\n          </ColumnGroup>\n\n          <ColumnGroup>\n            <Header>Info</Header>\n            <Footer>info</Footer>\n\n            <Column accessor="age" id="age" togglerLabel="Ages">\n              <Header>Age</Header>\n              <Footer>age</Footer>\n            </Column>\n\n            <ColumnGroup>\n              <Header>More info</Header>\n              <Column accessor="visits" id="visits" togglerLabel="Visits">\n                <Header>Visits</Header>\n                <Footer>visits</Footer>\n              </Column>\n              <Column accessor="status" id="status" togglerLabel="Statuses">\n                <Header>Status</Header>\n                <Footer>status</Footer>\n              </Column>\n              <Column accessor="progress" id="progress" width={50} sortable={false} togglerLabel="Progresses">\n                <Header>Progress</Header>\n                <Footer>progress</Footer>\n              </Column>\n            </ColumnGroup>\n          </ColumnGroup>\n        </>}\n    </Table>;\n}',...Expandable.parameters?.docs?.source}}},ConditionallyExpandable.parameters={...ConditionallyExpandable.parameters,docs:{...ConditionallyExpandable.parameters?.docs,source:{originalSource:'() => {\n  const {\n    staticData\n  } = useTableStory(60);\n  return <Table dataset={staticData} id="basic-table" selectable isRowExpandable={row => row.age > 5} renderRowExpanded={data => <pre style={{\n    margin: 0\n  }}>{JSON.stringify(data, null, 4)}</pre>}>\n      {({\n      Column,\n      Cell,\n      ColumnGroup,\n      Footer,\n      Header\n    }) => <>\n          <Column accessor="id" width={10} id="id" resizable={false} togglerLabel="User IDs" hidden>\n            <Cell>{(_data, index) => (index + 1).toString().padStart(3, \'0\')}</Cell>\n          </Column>\n\n          <ColumnGroup>\n            <Header>Hello</Header>\n            <Column accessor="name.first" id="name.first" togglerLabel="First names">\n              <Footer>firstName</Footer>\n            </Column>\n            <Column accessor="name.last" id="name.last" togglerLabel="Last names">\n              <Header>Last name</Header>\n              <Footer>lastName</Footer>\n            </Column>\n          </ColumnGroup>\n\n          <ColumnGroup>\n            <Header>Info</Header>\n            <Footer>info</Footer>\n\n            <Column accessor="age" id="age" togglerLabel="Ages">\n              <Header>Age</Header>\n              <Footer>age</Footer>\n            </Column>\n\n            <ColumnGroup>\n              <Header>More info</Header>\n              <Column accessor="visits" id="visits" togglerLabel="Visits">\n                <Header>Visits</Header>\n                <Footer>visits</Footer>\n              </Column>\n              <Column accessor="status" id="status" togglerLabel="Statuses">\n                <Header>Status</Header>\n                <Footer>status</Footer>\n              </Column>\n              <Column accessor="progress" id="progress" width={50} sortable={false} togglerLabel="Progresses">\n                <Header>Progress</Header>\n                <Footer>progress</Footer>\n              </Column>\n            </ColumnGroup>\n          </ColumnGroup>\n        </>}\n    </Table>;\n}',...ConditionallyExpandable.parameters?.docs?.source}}},Virtualized.parameters={...Virtualized.parameters,docs:{...Virtualized.parameters?.docs,source:{originalSource:'() => {\n  const {\n    staticData\n  } = useTableStory(1000);\n  return <Table dataset={staticData} id="basic-table" resizableColumns={false} renderActionsBar={false} renderHeader={false} virtualized={{\n    estimateRowSize: 27\n  }}>\n      {({\n      Column\n    }) => <>\n          <Column accessor="name.first" />\n          <Column accessor="name.last" />\n          <Column accessor="age" />\n          <Column accessor="progress" />\n        </>}\n    </Table>;\n}',...Virtualized.parameters?.docs?.source}}},InfiniteScroll.parameters={...InfiniteScroll.parameters,docs:{...InfiniteScroll.parameters?.docs,source:{originalSource:'() => {\n  const {\n    data,\n    isLoading,\n    sendQuery\n  } = useTableStory(1000);\n  return <Table dataset={data} id="basic-table" resizableColumns={false} renderActionsBar={false} renderFooter renderHeader={false} loading={isLoading} infiniteScroll={{\n    handleOnLoadMore: sendQuery,\n    maxDatasetLength: 1000\n  }}>\n      {({\n      Column\n    }) => <>\n          <Column accessor="name.first" />\n          <Column accessor="name.last" />\n          <Column accessor="age" />\n          <Column accessor="progress" />\n        </>}\n    </Table>;\n}',...InfiniteScroll.parameters?.docs?.source}}},VirtualizedInfiniteScroll.parameters={...VirtualizedInfiniteScroll.parameters,docs:{...VirtualizedInfiniteScroll.parameters?.docs,source:{originalSource:'() => {\n  const {\n    data,\n    isLoading,\n    sendQuery\n  } = useTableStory(1000);\n  return <Table dataset={data} id="basic-table" resizableColumns={false} renderActionsBar={false} renderHeader={false} loading={isLoading} infiniteScroll={{\n    handleOnLoadMore: sendQuery,\n    maxDatasetLength: 1000\n  }} renderFooter virtualized={{\n    estimateRowSize: 27\n  }}>\n      {({\n      Column\n    }) => <>\n          <Column accessor="name.first" />\n          <Column accessor="name.last" />\n          <Column accessor="age" />\n          <Column accessor="progress" />\n        </>}\n    </Table>;\n}',...VirtualizedInfiniteScroll.parameters?.docs?.source}}},EmptyState.parameters={...EmptyState.parameters,docs:{...EmptyState.parameters?.docs,source:{originalSource:'() => {\n  return <Table<Person[]> dataset={[]} id="basic-table" endMessage="" resizableColumns={false} renderActionsBar={false} renderFooter>\n      {({\n      Column,\n      Header,\n      Footer\n    }) => <>\n          <Column accessor="name.first">\n            <Header>First name</Header>\n            <Footer>First name</Footer>\n          </Column>\n          <Column accessor="name.last">\n            <Header>Last name</Header>\n            <Footer>Last name</Footer>\n          </Column>\n          <Column accessor="age">\n            <Header>Age</Header>\n            <Footer>Age</Footer>\n          </Column>\n          <Column accessor="progress">\n            <Header>Progress</Header>\n            <Footer>Progress</Footer>\n          </Column>\n        </>}\n    </Table>;\n}',...EmptyState.parameters?.docs?.source}}},LoadingWithoutData.parameters={...LoadingWithoutData.parameters,docs:{...LoadingWithoutData.parameters?.docs,source:{originalSource:'() => {\n  return <Table<Person[]> dataset={[]} id="basic-table" endMessage="" resizableColumns={false} renderActionsBar={false} renderFooter loading>\n      {({\n      Column,\n      Header,\n      Footer\n    }) => <>\n          <Column accessor="name.first">\n            <Header>First name</Header>\n            <Footer>First name</Footer>\n          </Column>\n          <Column accessor="name.last">\n            <Header>Last name</Header>\n            <Footer>Last name</Footer>\n          </Column>\n          <Column accessor="age">\n            <Header>Age</Header>\n            <Footer>Age</Footer>\n          </Column>\n          <Column accessor="progress">\n            <Header>Progress</Header>\n            <Footer>Progress</Footer>\n          </Column>\n        </>}\n    </Table>;\n}',...LoadingWithoutData.parameters?.docs?.source}}},LoadingWithData.parameters={...LoadingWithData.parameters,docs:{...LoadingWithData.parameters?.docs,source:{originalSource:'() => {\n  const {\n    staticData\n  } = useTableStory(10);\n  return <Table dataset={staticData} id="basic-table" endMessage="" resizableColumns={false} renderActionsBar={false} renderFooter loading>\n      {({\n      Column,\n      Header,\n      Footer\n    }) => <>\n          <Column accessor="name.first">\n            <Header>First name</Header>\n            <Footer>First name</Footer>\n          </Column>\n          <Column accessor="name.last">\n            <Header>Last name</Header>\n            <Footer>Last name</Footer>\n          </Column>\n          <Column accessor="age">\n            <Header>Age</Header>\n            <Footer>Age</Footer>\n          </Column>\n          <Column accessor="progress">\n            <Header>Progress</Header>\n            <Footer>Progress</Footer>\n          </Column>\n        </>}\n    </Table>;\n}',...LoadingWithData.parameters?.docs?.source}}},Playground.parameters={...Playground.parameters,docs:{...Playground.parameters?.docs,source:{originalSource:'props => {\n  const maxData = 400;\n  const {\n    data,\n    isLoading,\n    sendQuery\n  } = useCustomFetch({\n    makeData: makeTableData,\n    maxItems: maxData,\n    itemsPerQuery: 20\n  });\n  return <>\n      <Table<Person[]> {...props} dataset={data} infiniteScroll={{\n      handleOnLoadMore: sendQuery,\n      maxDatasetLength: maxData\n    }} loading={isLoading}>\n        {({\n        Cell,\n        Column,\n        Footer,\n        Header,\n        ColumnGroup\n      }) => <>\n            <Column accessor="id" width={10} id="id" resizable={false} togglerLabel="User IDs" hidden>\n              <Cell>{(_data, index) => (index + 1).toString().padStart(3, \'0\')}</Cell>\n            </Column>\n\n            <ColumnGroup>\n              <Header>Hello</Header>\n              <Column accessor="name.first" id="name.first" togglerLabel="First names">\n                <Footer>firstName</Footer>\n              </Column>\n              <Column accessor="name.last" id="name.last" togglerLabel="Last names">\n                <Header>Last name</Header>\n                <Footer>lastName</Footer>\n              </Column>\n            </ColumnGroup>\n\n            <ColumnGroup>\n              <Header>Info</Header>\n              <Footer>info</Footer>\n\n              <Column accessor="age" id="age" togglerLabel="Ages">\n                <Header>Age</Header>\n                <Footer>age</Footer>\n              </Column>\n\n              <ColumnGroup>\n                <Header>More info</Header>\n                <Column accessor="visits" id="visits" togglerLabel="Visits">\n                  <Header>Visits</Header>\n                  <Footer>visits</Footer>\n                </Column>\n                <Column accessor="status" id="status" togglerLabel="Statuses" summary={1000}>\n                  <Header>Status</Header>\n                  <Footer>status</Footer>\n                </Column>\n                <Column accessor="progress" id="progress" width={50} sortable={false} togglerLabel="Progresses" summary={1000}>\n                  <Header>Progress</Header>\n                  <Footer>progress</Footer>\n                </Column>\n              </ColumnGroup>\n            </ColumnGroup>\n          </>}\n      </Table>\n    </>;\n}',...Playground.parameters?.docs?.source}}};const __namedExportsOrder=["Basic","WithHeader","WithHeaderAndFooter","StickyHeaderAndFooter","CustomCells","Striped","Hoverable","WithActions","StickyActions","ActionBar","FullHeight","GroupedColumns","ColumnSummary","Resizable","ResizeOnRelease","Sortable","Selectable","ConditionallySelectable","Expandable","ConditionallyExpandable","Virtualized","InfiniteScroll","VirtualizedInfiniteScroll","EmptyState","LoadingWithoutData","LoadingWithData","Playground"];try{Playground.displayName="Playground",Playground.__docgenInfo={description:"",displayName:"Playground",props:{dataset:{defaultValue:null,description:"",name:"dataset",required:!0,type:{name:"Person[]"}},reference:{defaultValue:null,description:"",name:"reference",required:!1,type:{name:"RefObject<HTMLDivElement>"}},stickyHeader:{defaultValue:null,description:"",name:"stickyHeader",required:!1,type:{name:"boolean"}},stickyFooter:{defaultValue:null,description:"",name:"stickyFooter",required:!1,type:{name:"boolean"}},stickyActions:{defaultValue:null,description:"",name:"stickyActions",required:!1,type:{name:"boolean"}},selectable:{defaultValue:null,description:"",name:"selectable",required:!1,type:{name:"boolean | ((data: Person) => boolean)"}},renderFooter:{defaultValue:null,description:"",name:"renderFooter",required:!1,type:{name:"boolean"}},renderHeader:{defaultValue:null,description:"",name:"renderHeader",required:!1,type:{name:"boolean"}},resizeColumnOnReleaseMouseButton:{defaultValue:null,description:"",name:"resizeColumnOnReleaseMouseButton",required:!1,type:{name:"boolean"}},id:{defaultValue:null,description:"",name:"id",required:!0,type:{name:"string"}},resizableColumns:{defaultValue:null,description:"",name:"resizableColumns",required:!1,type:{name:"boolean"}},hoverable:{defaultValue:null,description:"",name:"hoverable",required:!1,type:{name:"boolean"}},i18n:{defaultValue:null,description:"",name:"i18n",required:!1,type:{name:"I18n"}},onSelectionChange:{defaultValue:null,description:"",name:"onSelectionChange",required:!1,type:{name:"((selectedRows: number[]) => void)"}},striped:{defaultValue:null,description:"",name:"striped",required:!1,type:{name:"boolean"}},actions:{defaultValue:null,description:"",name:"actions",required:!1,type:{name:"Action<Person[]>[]"}},actionsColumnWidth:{defaultValue:null,description:"",name:"actionsColumnWidth",required:!1,type:{name:"number"}},renderRowExpanded:{defaultValue:null,description:"",name:"renderRowExpanded",required:!1,type:{name:"((data: Person) => Element)"}},isRowExpandable:{defaultValue:null,description:"",name:"isRowExpandable",required:!1,type:{name:"((data: Person) => boolean)"}},virtualized:{defaultValue:null,description:"",name:"virtualized",required:!1,type:{name:"VirtualizedSettings"}},sortable:{defaultValue:null,description:"",name:"sortable",required:!1,type:{name:"boolean"}},onSortChange:{defaultValue:null,description:"",name:"onSortChange",required:!1,type:{name:"((sortedColumn?: SortedColumnInfo) => void)"}},toggleSelectOnRowClick:{defaultValue:null,description:"",name:"toggleSelectOnRowClick",required:!1,type:{name:"boolean"}},loading:{defaultValue:null,description:"",name:"loading",required:!1,type:{name:"boolean"}},useDefaultSortAlgorithm:{defaultValue:null,description:"",name:"useDefaultSortAlgorithm",required:!1,type:{name:"boolean"}},dragToSelect:{defaultValue:null,description:"",name:"dragToSelect",required:!1,type:{name:"boolean"}},infiniteScroll:{defaultValue:null,description:"",name:"infiniteScroll",required:!1,type:{name:"InfiniteScrollSettings"}},endMessage:{defaultValue:null,description:"",name:"endMessage",required:!1,type:{name:"EndMessage"}},showSearch:{defaultValue:null,description:"",name:"showSearch",required:!1,type:{name:"boolean"}},showColumnsButton:{defaultValue:null,description:"",name:"showColumnsButton",required:!1,type:{name:"boolean"}},title:{defaultValue:null,description:"",name:"title",required:!1,type:{name:"string"}},renderActionsBar:{defaultValue:null,description:"",name:"renderActionsBar",required:!1,type:{name:"boolean"}},fullHeight:{defaultValue:null,description:"",name:"fullHeight",required:!1,type:{name:"boolean"}},debounceSearchInput:{defaultValue:null,description:"",name:"debounceSearchInput",required:!1,type:{name:"boolean"}},searchInputDebounceDelay:{defaultValue:null,description:"",name:"searchInputDebounceDelay",required:!1,type:{name:"number"}},onSearch:{defaultValue:null,description:"",name:"onSearch",required:!1,type:{name:"((query: string) => void)"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}},onClick:{defaultValue:null,description:"",name:"onClick",required:!1,type:{name:"((evt: MouseEvent<HTMLDivElement, MouseEvent>) => void)"}},containerProps:{defaultValue:null,description:"",name:"containerProps",required:!1,type:{name:'Omit<HTMLAttributes<HTMLDivElement>, "className" | "style" | "id" | "onClick" | "ref">'}},maxHeight:{defaultValue:null,description:"",name:"maxHeight",required:!1,type:{name:"string | number"}},maxWidth:{defaultValue:null,description:"",name:"maxWidth",required:!1,type:{name:"string | number"}},minHeight:{defaultValue:null,description:"",name:"minHeight",required:!1,type:{name:"string | number"}},minWidth:{defaultValue:null,description:"",name:"minWidth",required:!1,type:{name:"string | number"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["source/stories/table.story.tsx#Playground"]={docgenInfo:Playground.__docgenInfo,name:"Playground",path:"source/stories/table.story.tsx#Playground"})}catch(__react_docgen_typescript_loader_error){}}}]);